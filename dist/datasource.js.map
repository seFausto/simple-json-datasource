{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","index","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","_","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId","alias","Promise","resolve","reject"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,SAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,SAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,SAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,SAAKC,CAAL,GAASN,EAAT;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKK,eAAL,GAAuBR,iBAAiBQ,eAAxC;AACA,SAAKC,OAAL,GAAe,EAAE,gBAAgB,kBAAlB,EAAf;AACA,QAAI,OAAOT,iBAAiBU,SAAxB,KAAsC,QAAtC,IAAkDV,iBAAiBU,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,WAAKF,OAAL,CAAa,eAAb,IAAgCT,iBAAiBU,SAAjD;AACD;AACF;;;;0BAEKE,O,EAAS;AACb,UAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;;AAEAC,YAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,eAAK,CAACC,EAAEC,IAAR;AAAA,OAArB,CAAhB;;AAEA,UAAIL,MAAME,OAAN,CAAcJ,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAKJ,CAAL,CAAOY,IAAP,CAAY,EAAEC,MAAM,EAAR,EAAZ,CAAP;AACD;;AAED,UAAI,KAAKjB,WAAL,CAAiBkB,eAArB,EAAsC;AACpCR,cAAMS,YAAN,GAAqB,KAAKnB,WAAL,CAAiBkB,eAAjB,CAAiC,KAAKf,IAAtC,CAArB;AACD,OAFD,MAEO;AACLO,cAAMS,YAAN,GAAqB,EAArB;AACD;;AAED,aAAO,KAAKC,SAAL,CAAe;AACpBlB,aAAK,KAAKA,GAAL,GAAW,QADI;AAEpBe,cAAMP,KAFc;AAGpBW,gBAAQ;AAHY,OAAf,EAIJC,IAJI,CAIC,oBAAY;AAClB,YAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQF,SAASN,IAAT,CAAcT,MAA1C,EAAkDiB,OAAlD,EAA2D;AACzD,gBAAIf,MAAME,OAAN,CAAca,KAAd,EAAqB,OAArB,CAAJ,EACAF,SAASN,IAAT,CAAcQ,KAAd,EAAqB,QAArB,IAAgCf,MAAME,OAAN,CAAca,KAAd,EAAqB,OAArB,CAAhC;AACD;AACF;AACD,eAAOF,QAAP;AACD,OAZM,CAAP;AAaD;;;qCAEgB;AACf,aAAO,KAAKH,SAAL,CAAe;AACpBlB,aAAK,KAAKA,GAAL,GAAW,GADI;AAEpBmB,gBAAQ;AAFY,OAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,YAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAEA,QAAQ,SAAV,EAAqBE,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEelB,O,EAAS;AACvB,UAAIC,QAAQ,KAAKV,WAAL,CAAiB4B,OAAjB,CAAyBnB,QAAQoB,UAAR,CAAmBnB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,UAAIoB,kBAAkB;AACpBC,eAAOtB,QAAQsB,KADK;AAEpBF,oBAAY;AACV1B,gBAAMM,QAAQoB,UAAR,CAAmB1B,IADf;AAEV6B,sBAAYvB,QAAQoB,UAAR,CAAmBG,UAFrB;AAGVC,kBAAQxB,QAAQoB,UAAR,CAAmBI,MAHjB;AAIVC,qBAAWzB,QAAQoB,UAAR,CAAmBK,SAJpB;AAKVxB,iBAAOA;AALG,SAFQ;AASpByB,kBAAU1B,QAAQ0B;AATE,OAAtB;;AAYA,aAAO,KAAKf,SAAL,CAAe;AACpBlB,aAAK,KAAKA,GAAL,GAAW,cADI;AAEpBmB,gBAAQ,MAFY;AAGpBJ,cAAMa;AAHc,OAAf,EAIJR,IAJI,CAIC,kBAAU;AAChB,eAAOc,OAAOnB,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEeP,K,EAAO;AACrB,UAAI2B,eAAe;AACjBC,gBAAQ,KAAKtC,WAAL,CAAiB4B,OAAjB,CAAyBlB,KAAzB,EAAgC,IAAhC,EAAsC,OAAtC;AADS,OAAnB;;AAIA,aAAO,KAAKU,SAAL,CAAe;AACpBlB,aAAK,KAAKA,GAAL,GAAW,SADI;AAEpBe,cAAMoB,YAFc;AAGpBhB,gBAAQ;AAHY,OAAf,EAIJC,IAJI,CAIC,KAAKiB,cAJN,CAAP;AAKD;;;mCAEcH,M,EAAQ;AACrB,aAAOI,iBAAEC,GAAF,CAAML,OAAOnB,IAAb,EAAmB,UAACyB,CAAD,EAAIC,CAAJ,EAAU;AAClC,YAAID,KAAKA,EAAEE,IAAP,IAAeF,EAAEG,KAArB,EAA4B;AAC1B,iBAAO,EAAED,MAAMF,EAAEE,IAAV,EAAgBC,OAAOH,EAAEG,KAAzB,EAAP;AACD,SAFD,MAEO,IAAIL,iBAAEM,QAAF,CAAWJ,CAAX,CAAJ,EAAmB;AACxB,iBAAO,EAAEE,MAAMF,CAAR,EAAWG,OAAOF,CAAlB,EAAP;AACD;AACD,eAAO,EAAEC,MAAMF,CAAR,EAAWG,OAAOH,CAAlB,EAAP;AACD,OAPM,CAAP;AAQD;;;8BAESjC,O,EAAS;AACjBA,cAAQJ,eAAR,GAA0B,KAAKA,eAA/B;AACAI,cAAQH,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,aAAO,KAAKP,UAAL,CAAgBgD,iBAAhB,CAAkCtC,OAAlC,CAAP;AACD;;;yCAEoBA,O,EAAS;AAAA;;AAC5B;AACAA,cAAQG,OAAR,GAAkB4B,iBAAE3B,MAAF,CAASJ,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,eAAO0B,OAAOA,MAAP,KAAkB,eAAzB;AACD,OAFiB,CAAlB;;AAIA,UAAI1B,UAAU4B,iBAAEC,GAAF,CAAMhC,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,eAAO;AACL0B,kBAAQ,MAAKtC,WAAL,CAAiB4B,OAAjB,CAAyBU,OAAOA,MAAhC,EAAwC7B,QAAQuC,UAAhD,EAA4D,OAA5D,CADH;AAELC,iBAAOX,OAAOW,KAFT;AAGLlC,gBAAMuB,OAAOvB,IAHR;AAILd,gBAAMqC,OAAOrC,IAAP,IAAe,WAJhB;AAKLiD,iBAAOZ,OAAOY;AALT,SAAP;AAOD,OARa,CAAd;;AAUAzC,cAAQG,OAAR,GAAkBA,OAAlB;;AAEA,aAAOH,OAAP;AACD;;;+BAEUA,O,EAAS;AAAA;;AAClB,aAAO,IAAI0C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKjC,SAAL,CAAe;AACblB,eAAK,OAAKA,GAAL,GAAW,WADH;AAEbmB,kBAAQ,MAFK;AAGbJ,gBAAMR;AAHO,SAAf,EAIGa,IAJH,CAIQ,kBAAU;AAChB,iBAAO8B,QAAQhB,OAAOnB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD;;;iCAEYR,O,EAAS;AAAA;;AACpB,aAAO,IAAI0C,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKjC,SAAL,CAAe;AACblB,eAAK,OAAKA,GAAL,GAAW,aADH;AAEbmB,kBAAQ,MAFK;AAGbJ,gBAAMR;AAHO,SAAf,EAIGa,IAJH,CAIQ,kBAAU;AAChB,iBAAO8B,QAAQhB,OAAOnB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.headers = { 'Content-Type': 'application/json' };\r\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n      this.headers['Authorization'] = instanceSettings.basicAuth;\r\n    }\r\n  }\r\n\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    return this.doRequest({\r\n      url: this.url + '/query',\r\n      data: query,\r\n      method: 'POST'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        for (let index = 0; index < response.data.length; index++) {\r\n          if (query.targets[index][\"alias\"])\r\n          response.data[index][\"target\"]= query.targets[index][\"alias\"];\r\n        }\r\n      }\r\n      return response;\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: this.url + '/',\r\n      method: 'GET',\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n    var annotationQuery = {\r\n      range: options.range,\r\n      annotation: {\r\n        name: options.annotation.name,\r\n        datasource: options.annotation.datasource,\r\n        enable: options.annotation.enable,\r\n        iconColor: options.annotation.iconColor,\r\n        query: query\r\n      },\r\n      rangeRaw: options.rangeRaw\r\n    };\r\n\r\n    return this.doRequest({\r\n      url: this.url + '/annotations',\r\n      method: 'POST',\r\n      data: annotationQuery\r\n    }).then(result => {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    var interpolated = {\r\n      target: this.templateSrv.replace(query, null, 'regex')\r\n    };\r\n\r\n    return this.doRequest({\r\n      url: this.url + '/search',\r\n      data: interpolated,\r\n      method: 'POST',\r\n    }).then(this.mapToTextValue);\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, (d, i) => {\r\n      if (d && d.text && d.value) {\r\n        return { text: d.text, value: d.value };\r\n      } else if (_.isObject(d)) {\r\n        return { text: d, value: i };\r\n      }\r\n      return { text: d, value: d };\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || 'timeserie',\r\n        alias: target.alias\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.doRequest({\r\n        url: this.url + '/tag-keys',\r\n        method: 'POST',\r\n        data: options\r\n      }).then(result => {\r\n        return resolve(result.data);\r\n      });\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.doRequest({\r\n        url: this.url + '/tag-values',\r\n        method: 'POST',\r\n        data: options\r\n      }).then(result => {\r\n        return resolve(result.data);\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n"]}